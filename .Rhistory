geom_line(data=donF %>% filter(variable %in% c('PAR','FR')),aes(x=hms,y=tension,col=variable))+
facet_wrap(~Date)+
scale_x_time()+
ylab(expression('PFD '*(mu*mol*' '*m**-2*' '*s**-1)))
ggplot()+
geom_line(data=donPlot %>% filter(variable %in% c('PAR','FR')),aes(x=hms,y=tension,col=variable))+
facet_wrap(~Date)+
scale_x_time()+
ylab(expression('PFD '*(mu*mol*' '*m**-2*' '*s**-1)))
donPlot %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(tension=ifelse(sensor=='T3 S1',tension*coefFR,tension)) %>%
mutate(tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension)) %>%
ggplot(aes(x=time,y=tension,col=sensor))+
geom_line()+
facet_wrap(~variable,scale='free_y')+
scale_x_datetime()+
labs(y='')
donPlot %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(tension=ifelse(sensor=='T3 S1',tension*coefFR,tension)) %>%
mutate(tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension)) %>%
ggplot(aes(x=time,y=tension,col=sensor,group=DATA))+
geom_line()+
facet_wrap(~variable,scale='free_y')+
scale_x_datetime()+
labs(y='')
donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR,DATA)
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR,DATA),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR,DATA)) %>%
mutate(ratio=FR/(FR+PAR))
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR,DATA),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR,DATA)) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR,DATA),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR,DATA)) %>%
mutate(ratio=FR/(FR+PAR))
donPlot%>% filter(variable=='FR')
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR,DATA),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR,DATA))
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
geom_line()+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
mutate(ratio=FR/(FR+PAR))
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(PAR+FR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
geom_line()+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(FR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
geom_line()+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(FR>0 & PAR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,col=Date))+
geom_line()+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(FR>0 & PAR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,group=Date))+
geom_line()+
scale_x_time()
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(FR>0 & PAR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,group=Date,col=PAR))+
geom_line()+
scale_x_time()
# SCRITP TO READ AND VISUALIZE THE DATA OF PAR SENSORS FROM THE PH --------
### R. PEREZ, 16 Mai 2024
# Load packages -----------------------------------------------------------
packs <- c("lubridate", "stringr", 'tidyverse','viridis','data.table','cowplot','plotly')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
# inputs ------------------------------------------------------------------
### Apogee sensors coefficients
coefPAR=71.0 #micromol.m-2.s-1 per mV
coefFR=51.45 #micromol.m-2.s-1 per mV
## vector of info names in the RawData column
nbSlots=7
names=paste0(c('slot','value'),rep(x = c(1:nbSlots),each=2))
vecName= c('station',names,'E')
tableSlot=data.frame(sensor=c("T0 S2","T1 S3","T2 S1","T3 S1","T4 S1","T5 S1","T6 S1"),
variable=c('Battery','Temperature','PAR','FR','-','--','---'))
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
data.frame()
# load the data -----------------------------------------------------------
allDat=NULL #init
files=list.files(path = '0-data/',pattern = 'DATA')
for (file in files){
# file=files[1]
TimeStart=ymd_hms(donT[donT$File==str_remove(file,'.CSV'),'start'])
don_raw=data.table::fread(input = paste0('0-data/',file)) %>%
mutate(time=TimeStart+Timestamp,
ref=str_sub(RawData,start=4,end=str_length(RawData)-1)) %>%
tidyr::separate(col = ref,into =vecName ,sep='#')
don=don_raw %>% select(ID,Timestamp,Days,Hours,Minutes,time,RawData)
for (i in 1: nbSlots){
dsub=don_raw %>%
mutate(info=paste(get(paste0('slot',i)),get(paste0('value',i))))
colnames(dsub)[colnames(dsub)=='info']=paste0('info',i)
don=cbind(don,dsub %>%
select(paste0('info',i)))
}
donF=don %>%
tidyr::gather(key = 'info',value = 'value',contains('info')) %>%
mutate(value=str_remove(value,'_A11')) %>%
tidyr::separate(col = value,into = c('sensor','tension'),sep = '_') %>%
mutate(tension=as.numeric(tension),
DATA=file)
donF=merge(donF,tableSlot)
allDat=rbind(allDat,donF)
}
# plots -------------------------------------------------------------------
donPlot=allDat %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(Date=str_sub(time,1,10),
hms=hms(str_sub(time,12,19)),
tension=ifelse(sensor=='T3 S1',tension*coefFR,tension),
tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension))
donPlot %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(tension=ifelse(sensor=='T3 S1',tension*coefFR,tension)) %>%
mutate(tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension)) %>%
ggplot(aes(x=time,y=tension,col=sensor,group=DATA))+
geom_line()+
facet_wrap(~variable,scale='free_y')+
scale_x_datetime()+
labs(y='')
ggplotly(donPlot%>% filter(variable %in% c('PAR','FR')) %>%
ggplot(aes(x=time,y=tension,col=variable,group=DATA))+
geom_line()+
scale_x_datetime())
ggplot()+
geom_line(data=donPlot %>% filter(variable %in% c('PAR','FR')),aes(x=hms,y=tension,col=variable))+
facet_wrap(~Date)+
scale_x_time()+
ylab(expression('PFD '*(mu*mol*' '*m**-2*' '*s**-1)))
#### test the %FR with time and hour of the day
merge(donPlot%>% filter(variable=='PAR') %>%
mutate(PAR=tension) %>%
select(Date,time,hms,PAR),
donPlot%>% filter(variable=='FR') %>%
mutate(FR=tension) %>%
select(Date,time,hms,FR)) %>%
filter(FR>0 & PAR>0) %>%
mutate(ratio=FR/(FR+PAR)) %>%
ggplot(aes(x=hms,y=ratio,group=Date,col=PAR))+
geom_line()+
scale_x_time()
server<-function(input, output) {
output$contents <- reactive({
# Inputs
filepath<- reactive({
shiny::validate(shiny::need(!is.null(input$file1),
"Please select a file"))
input$file1$datapath
})
if (is.null(filepath())){
return(NULL)
}
if (is.null(input$Time)){
output$Dates<- renderUI({
if(!is.null(filepath)){
dates=read.table(file =filepath(),sep='\t',skip = 2,header=F,dec=',',fill=T)[,1]
dateRangeInput('Time', 'Select a date range:',
start =min(dmy(dates)),
end = max(dmy(dates)),
max =max(dmy(dates)))
}
})
}
# Import meteo data
headers=colnames(read.table(file =filepath(),sep='\t',header=T,dec=',',fill=T))
met=read.table(file =filepath(),sep='\t',skip = 2,header=F,dec=',',fill=T)
colnames(met)=headers
met=met%>%
mutate(date=dmy(DATE),
time=dmy_hms(paste(DATE,TIME)))%>%
mutate(Radiation=Radiation*10,
SP.Radiation=10*SP.Radiation,
CO2=10*CO2,
SP.CO2=10*SP.CO2)%>%
select(date,time,Temperature,SP.Temperature,Humidity,SP.Humidity,Radiation,SP.Radiation,CO2,SP.CO2)
##estimate VPD
##paramter for estimating saturated vapour pressure (SVP) for a given temperature
p1=18.9321
p2=5300.24
met=met %>%
mutate(VPD=(exp(p1-p2/(Temperature+273)))*(1-Humidity/100),
SP.VPD=(exp(p1-p2/(SP.Temperature+273)))*(1-SP.Humidity/100))
###select Dates
minDate <- input$Time[1]
maxDate <- input$Time[2]+1
# minDate='2019-06-12'
# maxDate='Syst.Date()
# graphics ----------------------------------------------------------------
if(input$variable=='Temperature'){
# ylab=expression(Temperature~(degree~C))
ylab='Temperature (Â°C)'}
if(input$variable=='Humidity'){
ylab='Relative humidity (%)'}
if(input$variable=='VPD'){
ylab='VPD (kPa)'}
if(input$variable=='Radiation'){
ylab='PAR (micro mol m-2 s-1)'}
if(input$variable=='CO2'){
ylab='CO2 (ppm)'}
graph1=met%>%
filter(time>=minDate & time<=maxDate)%>%
ggplot()+
geom_line(aes(x=time,y=get(paste0('SP.',input$variable)),col='consigne'))+
geom_line(aes(x=time,y=get(input$variable),col='mesure'))+
scale_color_manual(name='',values = viridis(2)[c(2,1)])+
xlab('')+
ylab(ylab)
if(input$variable=='All'){
graph1=met%>%
filter(time>=minDate & time<=maxDate)%>%
tidyr::gather(key='Variable',value='value',Temperature,Humidity,VPD,Radiation,CO2,SP.Temperature,SP.Humidity,SP.Radiation,SP.CO2,SP.VPD)%>%
mutate(type=ifelse(str_detect(string = Variable,pattern = "SP."),yes = 'consigne','mesure'))%>%
mutate(Variable=str_remove(string = Variable,pattern = 'SP.'))%>%
ggplot()+
geom_line(aes(x=time,y=value,col=type))+
scale_color_manual(name='',values = viridis(2)[c(2,1)])+
xlab('')+
facet_wrap(~Variable,scales = 'free_y')}
#
#
# graph2=met %>%
#     select(time,Hour,Day,Temp,HR,VPD,PAR,serre)%>%
#     filter(time>=minDate & time<=maxDate)%>%
#     ggplot(aes(x=Hour,y=get(input$variable),col=as.factor(Day)))+
#     geom_line()+
#     facet_grid(~serre)+
#     scale_color_viridis(name='',discrete = TRUE, "", direction = -1)+
#     scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")+
#     xlab('Time of the day')+
#     ylab(ylab)
# outputs -----------------------------------------------------------------
# output$sumTable=renderTable({don_recap_day
# },caption = paste("Average ",ylab),caption.placement = getOption("xtable.caption.placement", "top"))
output$graph1=renderPlotly({graph1
})
# output$graph2=renderPlotly({graph2
# })
})
}
library(shiny); runApp('App_visuRadiation.R')
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
data.frame()
donT=data.table::fread(input = '0-data/PAR Time.csv')
data.table::fread(input = '0-data/PAR Time.csv') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00')))
runApp('App_visuRadiation.R')
runApp('App_visuRadiation.R')
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
filter(!is.na(`Taking time`)) %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
data.frame()
donT
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
filter(!is.na(File)) %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
data.frame()
data.table::fread(input = '0-data/PAR Time.csv') %>%
filter(!is.na(File))
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
data.frame()
donT
filter(File!='') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
server<-function(input, output) {
output$contents <- reactive({
# Inputs
filepath<- reactive({
shiny::validate(shiny::need(!is.null(input$file1),
"Please select a file"))
input$file1$datapath
})
print(paste(filepath()))
if (is.null(filepath())){
return(NULL)
}
# import data -------------------------------------------------------------
output$don <- reactive({
if(!is.null(filepath)){
file='DATA_20240605.CSV'
TimeStart=ymd_hms(donT[donT$File==str_remove(file,'.CSV'),'start'])
don_raw=data.table::fread(input = filepath()) %>%
mutate(time=TimeStart+Timestamp,
ref=str_sub(RawData,start=4,end=str_length(RawData)-1)) %>%
tidyr::separate(col = ref,into =vecName ,sep='#')
don=don_raw %>% select(ID,Timestamp,Days,Hours,Minutes,time,RawData)
for (i in 1: nbSlots){
dsub=don_raw %>%
mutate(info=paste(get(paste0('slot',i)),get(paste0('value',i))))
colnames(dsub)[colnames(dsub)=='info']=paste0('info',i)
don=cbind(don,dsub %>%
select(paste0('info',i)))
}
donF=don %>%
tidyr::gather(key = 'info',value = 'value',contains('info')) %>%
mutate(value=str_remove(value,'_A11')) %>%
tidyr::separate(col = value,into = c('sensor','tension'),sep = '_') %>%
mutate(tension=as.numeric(tension),
DATA=file)
donF=merge(donF,tableSlot) %>%
mutate(Date=str_sub(time,1,10),
hms=hms(str_sub(time,12,19)),
tension=ifelse(sensor=='T3 S1',tension*coefFR,tension),
tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension))
print(donF)
return(donF)
}
})
# graphics ----------------------------------------------------------------
output$graph <- reactive({
if (is.null(don())){
return(NULL)
}
graph=don() %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(tension=ifelse(sensor=='T3 S1',tension*coefFR,tension)) %>%
mutate(tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension)) %>%
ggplot(aes(x=time,y=tension,col=sensor,group=DATA))+
geom_line()+
facet_wrap(~variable,scale='free_y')+
scale_x_datetime()+
labs(y='')
retunr(graph)
})
output$graph1=renderPlotly({graph()
})
})
}
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
data.frame() %>%
filter(File!='') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
server<-function(input, output) {
output$contents <- reactive({
# Inputs
filepath<- reactive({
shiny::validate(shiny::need(!is.null(input$file1),
"Please select a file"))
input$file1$datapath
})
print(paste(filepath()))
if (is.null(filepath())){
return(NULL)
}
# import data -------------------------------------------------------------
output$don <- reactive({
if(!is.null(filepath)){
file='DATA_20240605.CSV'
TimeStart=ymd_hms(donT[donT$File==str_remove(file,'.CSV'),'start'])
don_raw=data.table::fread(input = filepath()) %>%
mutate(time=TimeStart+Timestamp,
ref=str_sub(RawData,start=4,end=str_length(RawData)-1)) %>%
tidyr::separate(col = ref,into =vecName ,sep='#')
don=don_raw %>% select(ID,Timestamp,Days,Hours,Minutes,time,RawData)
for (i in 1: nbSlots){
dsub=don_raw %>%
mutate(info=paste(get(paste0('slot',i)),get(paste0('value',i))))
colnames(dsub)[colnames(dsub)=='info']=paste0('info',i)
don=cbind(don,dsub %>%
select(paste0('info',i)))
}
donF=don %>%
tidyr::gather(key = 'info',value = 'value',contains('info')) %>%
mutate(value=str_remove(value,'_A11')) %>%
tidyr::separate(col = value,into = c('sensor','tension'),sep = '_') %>%
mutate(tension=as.numeric(tension),
DATA=file)
donF=merge(donF,tableSlot) %>%
mutate(Date=str_sub(time,1,10),
hms=hms(str_sub(time,12,19)),
tension=ifelse(sensor=='T3 S1',tension*coefFR,tension),
tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension))
print(donF)
return(donF)
}
})
# graphics ----------------------------------------------------------------
output$graph <- reactive({
if (is.null(don())){
return(NULL)
}
graph=don() %>%
filter(variable %in% c('PAR','FR','Battery','Temperature')) %>%
mutate(tension=ifelse(sensor=='T3 S1',tension*coefFR,tension)) %>%
mutate(tension=ifelse(sensor=='T2 S1',tension*coefPAR,tension)) %>%
ggplot(aes(x=time,y=tension,col=sensor,group=DATA))+
geom_line()+
facet_wrap(~variable,scale='free_y')+
scale_x_datetime()+
labs(y='')
retunr(graph)
})
output$graph1=renderPlotly({graph()
})
})
}
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
data.frame() %>%
filter(File!='') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00')))
data.table::fread(input = '0-data/PAR Time.csv') %>%
data.frame() %>%
filter(File!='')
## start time
donT=data.table::fread(input = '0-data/PAR Time.csv') %>%
filter(File!='') %>%
mutate(start=dmy_hms(paste0(`Day of setting`,'_',`Setting Time`,':00')),
end=dmy_hms(paste0(`Day of taking`,'_',`Taking time`,':00'))) %>%
data.frame()
donT
runApp('App_visuRadiation.R')
runApp('App_visuRadiation.R')
runApp('App_visuRadiation.R')
